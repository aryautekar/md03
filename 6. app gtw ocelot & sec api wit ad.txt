Application Gateway Using Ocelot and Securing APIs with Azure AD

>ASP.NET Core Web Application Project. 
>Go to Program.cs file and add logging code.
>Now add new NuGet package for Ocelot
>Click on Project -> Manage NuGet Package -> Click on Browse -> Search for ocelot package -> install.
>Once Ocelot Package is installed Go to Startup.cs
>Now to Configure Ocelot add services.Addocelot() and app.UseOcelot().Wait() code.
>Now add the Ocelot JSON file.
> Click on Project name -> Add -> New Item -> JSON File ->(Give name)
>Add JSON Code.
>Create an Environmental Variable
>Change localhost to 5020 and 5021.
>Add Configuration to the system.
>Run the project.
























Program.cs file
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
namespace Oclot.Demo
{
    public static class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();   }
        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    var env = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
                    webBuilder.UseStartup<Startup>();
                    webBuilder.ConfigureAppConfiguration(config =>  config.AddJsonFile($"ocelot.{env}.json"));
                })
            .ConfigureLogging(logging => logging.AddConsole());
    } 
}

Startup.cs file
namespace Oclot.Demo
{
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddOcelot().AddCacheManager(settings => settings.WithDictionaryHandle());
        }
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            app.UseRouting();
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapGet("/", async context =>
                {
                    await context.Response.WriteAsync("Hello World!");
                });
            });
            app.UseOcelot().Wait();
        }
    } 
}

JSON file
{
  "Routes": [
    {
      "DownstreamPathTemplate": "/weatherforecast",
      "DownstreamScheme": "https",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": 5001
        } ],
      "UpstreamPathTemplate": "/api/weather",
      "UpstreamHttpMethod": [ "Get" ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "Bearer",
        "AllowedScopes": []  },
      "RateLimitOptions": {
        "ClientWhitelist": [],
        "EnableRateLimiting": true,
        "Period": "5s",
        "PeriodTimespan": 1,
        "Limit": 1 },
      "FileCacheOptions": { "TtlSeconds": 30 }
    }],
  "GlobalConfiguration": {
    "BaseUrl": "https://localhost:5021"
  }
}
